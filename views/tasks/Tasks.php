<?php

class Task
{

    function taskOne()
    {
        echo "
<p>
	Был вопрос по тому что как отобразить html ниже папки /web.</p>
<p>
	Сейчас как правило сайты не делаются с кучей html файлов. Типа index.php, tasks.php, about.html, contacts.php итд.</p>
<p>
	И тогда например mymagaz.local/tasks.php покажет станицу с задачами, а mymagaz.local/about.html покажет страницу &quot;о нас&quot; mymagaz.local/contacts.php покажет страницу контактов.</p>
<p>
	Раз сайты не делаются с кучей страниц, то как их показать?</p>
<p>
	Давай возьмем за основу идею что что бы войти на любую страницу сайта сначала идет обращение в index.php. Всегда. Какой бы не была строка адресса в браузере мы всегда попадаем на index.php. В чем преимущества такого подхода? Нам не нужно дублировать одно и то же на куче разных страниц. Мы всегда имеем контроль над запросом в одном месте.</p>
<p>
	Неможноко важной теории.</p>
<p>
	Запрос - в нашем случае это когда кто-то в браузере ввел протокол http:// и адресс mymagaz.local и через интернет это пришло к нашему веб серверу (apache). Апач такой смотрит. Ага, запрос содержит имя mymagaz.local, у меня в настрйоках написано что надо вызвать index.php в такой то папке, отдаю php. Дальше php получает данные от apache и начинает обработку index.php сверху вниз. Асинхронности тут нет. То есть сначала выполнится одна строка, потом следующая. Мы не можем перескочить вниз никак.</p>
<p>
	Так все таки как показать разные страницы? Ведь мы попадаем в index.php всегда. Для этого смотрят что там ввели в строку браузера.</p>
<p>
	Если на пальцах то смотрят. Если там написано /about то на вот тебе кусок html где написано о нас, если в строке запроса есть /contacts то на вот тебе html где написаны наши контакты.</p>
<p>
	1. Знакомимся с глобальной переменной \$_server. Находим где нам взять то что ввели в строку браузера (та часть что нас интересует)</p>
<p>
	2. Знакомимся с регулярными выражениями. После знакомства с помощью встроенной функции preg_match проверяем адресс.</p>
<p>
	3. Знакомимся с оператоми сравнения, кострукции if else.</p>
<p>
	Теперь задача:</p>
<p>
	Когда я ввожу в строку http://mymagaz.local/testhello/dima все что мне должен показать браузер это надпись hello, dima. Соответсвенно любое имя которое я введу должно быть там подставлено.</p>
<p>
	Я добавил htaccess который все запросы ведет в index.php, не обращай на него внимания.</p>
<p>
	Все что сейчас есть в index.php по прежнему должно отображаться если я ввожу просто http://mymagaz.local</p>

<p> Тебе не нужно создавать никаких файлов, все в index.php</p>
    ";
    }

    function taskTwo()
    {
        echo "
<p>
	Теперь давай познакомимся с классами. У нас в index.php сейчас есть функционал которые определяет что там у нас в ссылке находится. Давай вы инкапсулируем (страшное слово) - проще говоря уберем из index.php в отдельный класс этот функционал.</p>
<p>
	В чем суть этого?</p>
<p>
	1. Мы не будем засирать наш index.php. Сейчас определение что там у нас в ссылке - это пара строчек. Но может быть там будет 1000 строчек. Зачем нам это в индексе? Нас интересует по простому только что стоит до слеша и после слеша.</p>
<p>
	2. Возможно нам нужно будет узнать не только в Index.php что там в ссылке и нам не нужно будет туда опять писать один и тот же код реализации определения того что в ссылке. Мы просто будем обращаться к классу за этими данными.</p>
<p>
	3. Если у нас в 1000 местах будет уже стоять обращение к классу что там у нас в ссылке и нам вдруг понадобиться что-то поменять в логике нашего определения, то нам достаточно будет изменить только в классе, в одном месте.</p>
<p>
	Обычно то что ввели в строку браузера называют маршрутом (route). А класс который разбирается что там за маршрут и что делать в зависимости от маршрута Менеджер Маршрутов (route manager) или Служба Маршрутов (route service). Можно назвать как угодно этот класс, хоть petushatnik, но обычно называют RouteManager и тогда когда новый програмист приходит на проект и разбирается в коде, он быстренько по имени класса понимает о чем там речь внутри.</p>
<p>
	1. Создаем папку services</p>
<p>
	2. Создаем в этой папке класс RouteService</p>
<p>
	3. Инклудим его в наш index</p>
<p>
	4. Создаем экзепляр \$routeService в индексе.</p>
<p>
	5. В роутСервис нам нужны минимум два метода getFirstPart() и getSecondPart() (возможно тебе понадобиться больше сделать для каких-то целей, не стесняйся делать сколько надо). Первый должен возвращать нам что до первого слеша (например testhello), а второй например dima. Если в строке testhello/dima</p>
<p>
	5. Меняем в индексе там где ты определяешь в ифах что показывать на обращение к обьекту роутсервиса. Типа if (\$rs-&gt;getFirstPart() == &#39;testhello&#39;) { ...</p>
<p>
	6. То есть все работает как прежде, но определяем с помощью обьекта класса роутсервиса.</p>
<p>
	7. Давай добавим еще функционал, когда я ввожу любое что-то в строку, например http://mymagaz.local/jopa/negra то я хочу увидеть на экране 1. jopa. 2. negra. Ну и понятное дело что бы оно показывало именно то что я введу. Опять таки используем только наш сервис.</p>
<p>
	Доп литература: Почитать про https://ru.wikipedia.org/wiki/CamelCase</p>
<p>
	Мы тоже будем придерживаться этой практики, точно так же как принято в Java (В языке Java принято использовать UpperCamelCase для именования классов и lowerCamelCase &mdash; для именования экземпляров классов и методов.)</p>
<p> Чит код, если пока сложно с regexp. Можешь взглянуть на это https://www.php.net/manual/ru/function.explode.php </p>
    ";
    }

    function taskThree()
    {
        echo "
<p>
    Я включил ошибки все что бы показывало. Сейчас еще прокомментирую.
    <img src='/img/1.png' height='400'><br>
    1. tasks у тебя не строка.
    2. Это не ошибка, но используй как неравно !=. Так удобнее читать, и более принято.
<h3>Почитать про Типы данных (переменных) в PHP, например http://www.php.su/learnphp/vars/?types . То есть строки у нас всегда в кавычках.</h3>
Дальше про наш роутсервис. Мне в целом он ок. Только ты создал в нем две переменных и их не ипользуешь (зачем тогда создавал)? Можешь их пока убрать. Мы к созданию полей (переменных) класса еще вернемся через один этап.
<br>Сейчас что бы уменьшить количество механических ошибок и опечаток, нужно перейти на среду для разработки. IDE в народе.
<br>Мы будем юзать netbeans. Сейчас задача установить его и открыть проэкт.
<br>
1. Качаем https://netbeans.apache.org/download/nb112/nb112.html<br>
2. Ставим.<br>
3. Заходишь в tools -> options внизу слева import и импоритуешь настройки с архива что я тебе в телегу кинул. <br>
4. Дальше надо создать проект. file, new project, php, php application with existed sources, <br>
source folder - путь к корню нашего проекта,name - mymagaz.local, php verson 5.6, utf-8, finish
<br>
В дальнейшем пользовать только его. Из полезных клавишь alt + shift + f - форматирование текста. Ctrl+shift+ вниз/вверх скопировтаь строку. ctrl + alt + вниз/вверх - переместить строку.
Есть еще, но пока тебе рано знать их.
<br>
Дальше. Мне не нравится что у тебя в трех методах один и тот же код. <img src='/img/2.png' height='400'><br>
В случае когда надо изменить логику определения (например не эксплод, а регуляркой), тебе придется менять это в трех местах (в этих трех методах). Это не ок.
<br>
Вынеси одинаковый код в отдельный метод. Можешь заодно использовать переменные которые висят без толку сейчас. У тебя остануться все методы которые сейчас есть, добавиться еще только один и изменится содержимое твоих троих.
<br> Давай накинем еще инфы. Сставь публичными только три метода которые есть сейчас, остальное я не должен иметь доступ из индекса. Ознакомся с материалом https://www.php.net/manual/ru/language.oop5.visibility.php

</p>
<p>
    <a href='/'><h2>mymagaz.local</h2></a>
</p>
<p>
    <a href='/tasks'><h2>tasks</h2></a>
</p>
   ";
    }

    function taskFour()
    {
        echo "<p>
        here is will be the task four
        <p>";
    }
}
?>