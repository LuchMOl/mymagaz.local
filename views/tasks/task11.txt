Теперь давай сделаем уже наконец регистрацию.
1. Создаем страницу user/register. Она выводит форму регистрации. Минимум что нужно имейл и пароль. Если хочешь можешь еще чего хочешь добавить.
2. Когда форму сабмитят (жмут кнопку типа регистрируюсь или че там ты напишешь) то данные пользователя сохраняем в таблицу нашу user в бд.
3. После сохранения перенаправляем на нашу главную страницу (redirect делаем).

P.s. Форма понятное дело должна быть в рамках нашего дизайна общего. То есть шапка и футер остается как и на глваной ща, а между ними наша форма. Если не поймешь о чем я то я уточни уже в телеге.
Ща задания написал, особо не расписывая. Посмотрим как ты осилишь такой формат и заодно наделаешь кучу ошибок или не наделаешь, но я все равно потом расскажу что надо допилить или что и почему лучше сделать по другому.


----


В целом работает. Теперь надо учесть всякое.
1. Я ввожу в поле email не имейл и меня ргистрирует. Так быть не должно. Проверяем данные которые вводит пользователь. Юзаем регулярку (regexp)
2. То же самое с пустым паролем. Пароль не может быть пустым.
3. Касательно id и как ты его определяешь. Вытаскивая общий счет пользователей не очень надежно. Во первых если я удалю какого-то пользователя скажем с id 0, то их останется например 3, а у меня уже есть с id 3. То есть будет два пользователя с одинаковым id. Это приведет к плохим последствиям. Id должен быть уникальным. Более того надо запретить возможность хранить в таблице с одинаковым id. Смотерть в mysl что такое индексы, в частности primary. И что такое autoincrement и использовать это в таблице.
4. Касательно левого кода в даошке.
            echo '<script>
                location.href= "/";
                </script>';
Вот такой херни быть не должно. В плане не дело это дао куда-то чето принтить или редиректить. Дело дао просто создать пользователя, взаимодействовать с базой данных. Мы условились сами с собой что этот класс занимается только таким. Подобную логику реализовать в контроллере.
5. Как ты наверное заметил у нас есть дублирование кода создания подключения к бд.
 $dbh = new PDO('mysql:host=mymagaz.local;dbname=mymagaz', 'root', '', [
                \PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
                , \PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \'UTF8\''
            ]);
Более того у нас создается не одно подключение, что есть плохо. То есть мы на каждый запрос создаем свое подключение. Подключение что бы посчитать юзеров, подключение что бы вставить юзера. Потом еще чето будет. А создание подключеня к бд дело ресурсоемкое. Потому нам нужно что бы подключение к одному серверу бд ВСЕГДА в рамках запроса было одним.
Для этого нам нужно создать класс BaseDao. В нем по принципе сингильтона (мы когда-то делали) инициализировать подключение единожды по запросу к его методу connection(). Дальше все наши даохи наследуют этот класс. Читать что такое наследование классов в пхп.
6. Касательно методов конструкт и деструкт. Они вызываеются ВСЕГДА при создании и удалении обьекта. То есть ты ща прописал в контроллере там какой-то вывогд html. А допустим мне надо обратиться к методу контроллера и я не хочу что бы мне тот html выводило. Че мне делать? Или я хочу другой html. В общем не надо так делать. Более того надо вообще очень аккуратно относится к методу конструкт (про деструкт вообще забуть навсегда :)). Не пихать туда нихера без острой необходимости. Так как он вызывается ВСЕГДА при создании обьекта.
В общем убрать html оттуда и перенести в шаблон. Уже не раз говорил html держим отдельно в наших файлах view. Мы тоже так решили по принципу mvc что все что мы отображаем на экран мы храним в папке view в соответственных файлах.
7. Мне нравится что ты додумался выделить хедер и футер в отдельные файлы и инклудить их в одном месте. Это правильное решение. Но нужно его немножно усовершенствовать. Я обьясню почему. Мы с сайтом всегда общаемся через index.php, сейчас ты там рисуешь хедер и футер. Но нам не всегда будет нужно рисовать хедер и футер. Более того может быть что нам нужен другой хедер или футер итд.
Создаем папку view/layout, туда переносим наш хедер и футер. И теперь в наших вьюхах например в view/user/regiset.php или view/user/signin.php инклудим хедер и футер.
Да, мы так обязаны в каждом нашем шаблоне (так мы называем файлы в которых находится то что мы отображаем на экран, то что ниже папки view) инклудить хедер и футер. Тут можно сделать еще один уровень что бы каждый раз это не делать, но пока мы об этом забудем. Так что нужно переделать.


